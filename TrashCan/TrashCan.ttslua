local TrashCan = {}
--------------------------------------------------------------------------------
-- Global Variabels
local debug = require("/_libs/debug")
local zprint = debug.zprint
local tool      = require("/ArkhamHorror/TrashCan/TrashTools")
      tool.cast = require("/ArkhamHorror/TrashCan/TrashCast")
      tool.specialCase = require("/ArkhamHorror/TrashCan/TrashSpecialCase")
local KIND = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='Zone', SpecialCase='SpecialCase', Deck='Deck'}
--------------------------------------------------------------------------------
--- Function to Called by EVENT ------------------------------------------------
function TrashCan.process(TrashBag)
  runTrash(TrashBag)
end
--------------------------------------------------------------------------------
--- ProcessBagContents(TrashBag)------------------------------------------------
function runTrash(TrashBag)
    local removedDeckList = removeDecksFormTrash(TrashBag, TrashBag.getData().ContainedObjects)
    Wait.frames(function() ProcessBag(TrashBag, removedDeckList) end, 5) -- Wait a bit to ensure decks have spawned after being taken out of bag.
end
--------------------------------------------------------------------------------
--- ProcessBag(TrashBag, removedDeckList) --------------------------------------
--------------------------------------------------------------------------------
function ProcessBag(TrashBag, removedDeckList)
    local uniqueCast = UniqueCastLocations(TrashBag, removedDeckList)
    ProcessKind(TrashBag, uniqueCast, removedDeckList)
end
--- ProcessKind(TrashBag, Kind, uniqueCast, removedDeckList) -------------------
function ProcessKind(TrashBag, uniqueCast, removedDeckList)
 -- Process the remaining contents of TrashBag (remeber all decks have been removed)
    local TrashContents = TrashBag.getObjects()
    local idex = tool.takeObjects_reverseIndex(TrashContents)
    for k,dex in ipairs(idex) do
        local obj = TrashContents[dex+1]
        if obj.tags[1] then
            local id = tool.setIDs(obj.tags)
            --zprint(id,'ID++++')
            if id.discard then
                if id.kind == KIND.SpecialCase then
                    moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)
                else
                    for q,w in pairs(uniqueCast) do
                        if q == id.id then
                            moveObject(TrashBag.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                            break
                        end
                    end
                end
            else
                if id.delete then
                    destroyObject(TrashBag.takeObject({index = dex}))
                end
            end
        end
    end
 -- Process remaing removed Decks
    for _, deck in ipairs(removedDeckList) do
        TrashContents = deck.getObjects()
        idex = tool.takeObjects_reverseIndex(TrashContents)
        for k,dex in ipairs(idex) do
            local obj = TrashContents[dex+1]
            if obj.tags[1] then
                local id = tool.setIDs(obj.tags)
                if id.discard then
                    if id.kind == KIND.SpecialCase then
                        moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)
                    else
                        for q,w in pairs(uniqueCast) do
                            if q == id.id then
                                moveObject(deck.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                                break
                            end
                        end
                    end
                else
                    if id.delete then
                        destroyObject(TrashBag.takeObject({index = dex}))
                    end
                end
            end
        end
    end
end

function moveSpecialCase(obj, TrashBag)
    tool.specialCase.Process(obj,TrashBag)
end

function moveScriptZone(obj, TrashBag, uniqueCastID)
    local pos = tool.placeTopOrBot_ofObject(uniqueCastID.targetObj,'top')+Vector(0,0.2,0)
    Wait.frames(function()
        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))
        obj.setPositionSmooth(pos+Vector(0,uniqueCastID.Y,0))--+Vector(0,Cases[key].Y,0))
        uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2
    end,1)
end

function moveObject(obj, TrashBag, uniqueCastID, id)
    --zprint(uniqueCastID,'uniqueCastID')
    --if uniqueCastID.targetSource.type == 'Scripting' then
        --If I ever need more advanced control when sending to script zones.. I can put stuff in here and move the rest of ths block into ELSE
    --end
    Wait.frames(function()
        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))
        obj.setPositionSmooth(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top')+Vector(0,uniqueCastID.Y,0)) --uniqueCastID.targetSource.getPosition()
        uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2
        Wait.condition(function() uniqueCastID.targetObj = Wait_AddCardtoDeck(obj, uniqueCastID) end, function() return not obj.isSmoothMoving() end)
    end,1)
end

function getSizeofObj(obj)
    local size = obj.getBoundsNormalized().size
    return size
end

function Wait_AddCardtoDeck(obj, uniqueCastID)--(card, discardZonePos, targetObj)
    local discardPile = uniqueCastID.targetObj
    if discardPile then
        discardPile = discardPile.putObject(obj)
    else
        obj.setPosition(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top'))--+Vector(0,0.05,0))
        discardPile = obj
    end
    return discardPile
end
--- UniqueCastLocations(TrashBag, removedDeckList) -----------------------------
--- Build a list from trash and find the unique locations for each discard, then cast at that location and return found data.
--- Loop though trash objects and find the "DiscardMe_" Tag.. and then extract the "kind" of discard type as well as the unique Identifyer (ID) of the discard (DiscardMe_Bag, ID_BlueBagTest)
function UniqueCastLocations(TrashBag, removedDeckList)
    local z = {}
        for k,obj in ipairs(TrashBag.getObjects()) do
            if obj.tags[1] then
                local id = tool.setIDs(obj.tags)
                --zprint(id,'OBJ TEST')
                if id.discard then
                    if id.kind ~= KIND.SpecialCase then
                        z[id.id] = id.kind
                    end
                end
            end
        end

        for _, deck in ipairs (removedDeckList) do
            for _, card in ipairs(deck.getObjects()) do
                if card.tags[1] then
                    local id = tool.setIDs(card.tags)
                    --zprint(id,'TEST IN DECK')
                    if id.discard then
                        if id.kind ~= KIND.SpecialCase then
                            z[id.id] = id.kind
                        end
                    end
                end
            end
        end

        --zprint(z,'z >>>')
        z = tool.cast.findContainer(z)
    return z
end
--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function removeDecksFormTrash(TrashBag, TrashBag_ContentData)
    local z = {}
        local indexesToRemove = tool.reverseIndexbyTag(TrashBag_ContentData, {tags={'DiscardObject'}, search=false}, {Name='Deck'})
        for i,indexToRemove in ipairs (indexesToRemove) do
            local o = TrashBag.takeObject({ index = indexToRemove })
            --o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0,-8))
            o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,-70,0))
            o.setRotation(Vector(0,180,0))
            o.setLock(true)
            table.insert(z, o)
        end
    if z[1] then return z else return {} end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return TrashCan
