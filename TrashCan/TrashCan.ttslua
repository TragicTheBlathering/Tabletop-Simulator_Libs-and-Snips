local TrashCan = {}
--------------------------------------------------------------------------------
-- Global Variabels
local debug = require("/_libs/debug")
local zprint = debug.zprint
local tool      = require("/_libs/TrashCan/TrashTools")
      tool.cast = require("/_libs/TrashCan/TrashCast")
local KIND = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='ScriptZone', SpecialCase='SpecialCase', Deck='Deck'}
--------------------------------------------------------------------------------
--- Function to Called by EVENT ------------------------------------------------
function TrashCan.process(TrashBag)
  runTrash(TrashBag)
end
--------------------------------------------------------------------------------
--- ProcessBagContents(TrashBag)------------------------------------------------
function runTrash(TrashBag)
    local removedDeckList = removeDecksFormTrash(TrashBag, TrashBag.getData().ContainedObjects)
    Wait.frames(function() ProcessBag(TrashBag, removedDeckList) end, 5) -- Wait a bit to ensure decks have spawned after being taken out of bag.
end

function ProcessBag(TrashBag, removedDeckList)
    local uniqueCast = UniqueCastLocations(TrashBag, removedDeckList)
    for _, kind in pairs(KIND) do
        if kind ~= 'Deck' then
            uniqueCast = ProcessKind(TrashBag, kind, uniqueCast, removedDeckList)
        end
        --uniqueCast = ProcessKind(TrashBag, KIND.SmallCard, uniqueCast, removedDeckList)
    end
end

function ProcessKind(TrashBag, Kind, uniqueCast, removedDeckList)

    local TrashContents = TrashBag.getObjects()
    local idex = tool.takeObjects_reverseIndex(TrashContents)

    for k,v in ipairs(idex) do
        local obj = TrashContents[v+1]
        if obj.tags[1] then
            local id = tool.setIDs(obj.tags)
            if (id.tag and id.kind) then
                if id.kind == Kind then
                    --print('RawIndex = '..obj.index..' : ReverseIndex = '..v..' : Tag = '..id.tag..' : '..obj.name)
                    uniqueCast[id.tag].target = moveObject(TrashBag.takeObject({index = v}), id, uniqueCast[id.tag])
                end
            end
        end
    end

    if (Kind == 'Small' or Kind == 'Large') then
        for _, deck in ipairs(removedDeckList) do
            local DeckContents = deck.getObjects()
            local idex = tool.takeObjects_reverseIndex(DeckContents)
            for k,v in ipairs(idex) do
                local obj = DeckContents[v+1]
                if obj.tags[1] then
                    local id = tool.setIDs(obj.tags)
                    if (id.tag and id.kind) then
                        if id.kind == Kind then
                            --print('RawIndex = '..obj.index..' : ReverseIndex = '..v..' : Tag = '..id.tag..' : '..obj.name)
                            uniqueCast[id.tag].target = moveObject(deck.takeObject({index = v}), id, uniqueCast[id.tag])
                        end
                    end
                end
            end
        end
    end

    return uniqueCast
end

function moveObject(obj, id, uc)--(card, discardZonePos, targetObj)
    local discardPile = uc.target
    if uc.target == uc.platform then
        if (uc.kind == 'Small' or uc.kind == 'Large') then
            obj.setRotation(Vector(0,180,0))
        end
        obj.setPosition(discardPile.getPosition()+Vector(0,1,0))
        discardPile = obj
    else
        obj.setPosition(Vector(0,discardPile.getPosition().y,0) + Vector(0, discardPile.getBounds().size.y+1, 0))
        discardPile = discardPile.putObject(obj)
    end
    return discardPile
end
--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function UniqueCastLocations(TrashBag, removedDeckList)
    local z = {}
        for k,obj in ipairs(TrashBag.getObjects()) do
            if obj.tags[1] then
                local id = tool.setIDs(obj.tags)
                if (id.tag and id.kind) then
                    z[id.tag] = id.kind
                end
            end
        end

        for _, deck in ipairs (removedDeckList) do
            for _, card in ipairs(deck.getObjects()) do
                if card.tags[1] then
                    local id = tool.setIDs(card.tags)
                    if (id.tag and id.kind) then
                        z[id.tag] = id.kind
                    end
                end
            end
        end
        z = tool.cast.findContainer(z)
    return z
end
--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function removeDecksFormTrash(TrashBag, TrashBag_ContentData)
    local z = {}
        local indexesToRemove = tool.takeObjects_reverseIndex(TrashBag_ContentData, {Name='Deck'})

        local X = -10
        for _,indexToRemove in ipairs (indexesToRemove) do
            local o = TrashBag.takeObject({ index = indexToRemove })
            o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(X,0,23))
            o.setRotation(Vector(0,180,180))
            o.setLock(true)
            X = X + o.getBounds().size.x+0.2
            table.insert(z, o)
        end
    if z[1] then return z else return {} end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return TrashCan
