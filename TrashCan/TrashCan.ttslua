local TrashCan = {}
--------------------------------------------------------------------------------
-- Global Variabels
local debug = require("/_libs/debug")
local zprint = debug.zprint
local tool = {}
      tool.place       = require("/_libs/PositionUtils")
      tool.waitFor     = require("/_libs/WaitUtils")
      tool.findOBJs    = require("/_libs/FindObjs")
      tool.string      = require("/_libs/StringUtils")
      tool.takeObjects = require("/_libs/TakeObjects")
      tool.cast        = require("/_libs/TrashCan/TrashCast")
      tool.tagIDs      = require("/_libs/TrashCan/TrashIDTools")

local TYPES = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='ScriptZone', SpecialCase='SpecialCase', Deck='Deck'}
--------------------------------------------------------------------------------
--- Function to Called by EVENT ------------------------------------------------
function TrashCan.process(TrashBag)
    runTrash(TrashBag)
end
--------------------------------------------------------------------------------
--- ProcessBagContents(TrashBag)------------------------------------------------
function runTrash(TrashBag)
    local DeckList = removeDecksFormTrash(TrashBag)
    local TrashBag_Contents = TrashBag.getObjects()
    local uniqueCastLocations = setUniqueCastLocations(TrashBag_Contents)
    --zprint(uniqueCastLocations,'runTrash(TrashBag)')
    Wait.frames(function() StartCascade(TrashBag, DeckList, TrashBag_Contents, uniqueCastLocations) end, 5) -- wait 5 frames to ensure deck spawn properly
end
--------------------------------------------------------------------------------
--- StartCascade(TrashBag, SortedTrashContents) --------------------------------
function StartCascade(TrashBag, DeckList, TrashBag_Contents, uniqueCastLocations)
    --zprint(uniqueCastLocations, 'uniqueCastLocations')

    --local X = -10
    --for i = 10,1,-1 do print(i) end

    local currentTrash = TrashBag.getObjects()
    indexesToRemove = tool.takeObjects.reverseIndex(currentTrash)

    for _,indexToRemove in ipairs (indexesToRemove) do
        local obj = TrashBag.takeObject({ index = indexToRemove })
        local id = tool.tagIDs.setID(obj.getTags())

        if not id.skip then
            if id.tag == 'deleteme' then
                destroyObject(obj)
            elseif id.tag == 'specialcase' then
                SpecialCases(obj)
            else
                local Y = uniqueCastLocations[id.tag].Y
                obj.setPosition(tool.place.TopOrBot_ofObject(TrashBag,'top'))
                obj.setPositionSmooth(uniqueCastLocations[id.tag].platform.getPosition()+Vector(0,Y,0))
                obj.setRotation(Vector(0,180,0))
                uniqueCastLocations[id.tag].Y = Y + 0.5
            end
        end
    end


        --zprint(id..'IDS in OBJ Taken')



    --[[for _,indexToRemove in ipairs (indexesToRemove) do
        local obj = TrashBag.takeObject({ index = indexToRemove })
        local id = setID(obj.getTags())
        local Y = uniqueCastLocations[id.tag].Y
        obj.setPosition(tool.place.TopOrBot_ofObject(TrashBag,'top')+Vector(X,0,8))
        obj.setPositionSmooth(uniqueCastLocations[id.tag].platform.getPosition()+Vector(0,Y,0))
        obj.setRotation(Vector(0,180,0))
        X = X + obj.getBounds().size.x+0.2
        uniqueCastLocations[id.tag].Y = Y + 0.5
    end]]
end

function SpecialCases(obj)
    if obj.getName() == 'Cultist (Moon)' then
        obj.setPositionSmooth(Vector(-56.37, 3, 11.22))
    elseif obj.getName() == 'Gug (Monster) (Oblong)' then
        obj.setPositionSmooth(Vector(-53.04, 3, 11.22))
    end
end

--------------------------------------------------------------------------------
--- setUniqueCastLocations(SortedTrashContents) --------------------------------
function setUniqueCastLocations(TrashObjects)
    local z = {}
    local delme = {}
    local specialcase = {}
        for k,obj in pairs(TrashObjects) do
            if obj.tags[1] then
                local id = tool.tagIDs.setTrashIDs(obj.tags)
                if (id.tag and id.kind) then
                    --print('setUniqueCastLocations : '..id.tag..' : '..id.kind)
                    if string.lower(id.kind) == 'deleteme' then
                        delme[obj] = id.kind
                    elseif string.lower(id.kind) == 'specialcase' then
                        specialcase[obj] = id.kind
                    else
                        z[id.tag] = id.kind
                    end
                end
            end
        end

    z = tool.cast.findContainer(z)
    z.delme = delme
    z.specialcase = specialcase
    return z
end
--------------------------------------------------------------------------------
--- FindObjsInTrashBagFromData(TrashBag) ---------------------------------------
function removeDecksFormTrash(TrashBag)
    local z = {}
        local indexesToRemove = tool.takeObjects.reverseIndex(TrashBag.getData().ContainedObjects, {Name='Deck'})

        local X = -10
        for _,indexToRemove in ipairs (indexesToRemove) do
            local o = TrashBag.takeObject({ index = indexToRemove })
            o.setPosition(tool.place.TopOrBot_ofObject(TrashBag,'top')+Vector(X,0,23))
            o.setRotation(Vector(0,180,180))
            o.setLock(true)
            X = X + o.getBounds().size.x+0.2
            table.insert(z, o)
        end
    if z[1] then return z else return {} end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return TrashCan
