local TrashCan = {}
--------------------------------------------------------------------------------
-- Global Variabels
local debug = require("/_libs/debug")
local zprint = debug.zprint
local tool      = require("/_libs/TrashCan/TrashTools")
      tool.cast = require("/_libs/TrashCan/TrashCast")
local KIND = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='ScriptZone', SpecialCase='SpecialCase', Deck='Deck'}
--------------------------------------------------------------------------------
--- Function to Called by EVENT ------------------------------------------------
function TrashCan.process(TrashBag)
  runTrash(TrashBag)
end
--------------------------------------------------------------------------------
--- ProcessBagContents(TrashBag)------------------------------------------------
function runTrash(TrashBag)
    local removedDeckList = removeDecksFormTrash(TrashBag, TrashBag.getData().ContainedObjects)
    Wait.frames(function() ProcessBag(TrashBag, removedDeckList) end, 5) -- Wait a bit to ensure decks have spawned after being taken out of bag.
end
--------------------------------------------------------------------------------
--- ProcessBag(TrashBag, removedDeckList) --------------------------------------
--------------------------------------------------------------------------------
function ProcessBag(TrashBag, removedDeckList)
    local uniqueCast = UniqueCastLocations(TrashBag, removedDeckList)
    for _, kind in pairs(KIND) do
        if kind ~= 'Deck' then
            uniqueCast = ProcessKind(TrashBag, kind, uniqueCast, removedDeckList)
        end
    end
end
--- ProcessKind(TrashBag, Kind, uniqueCast, removedDeckList) -------------------
function ProcessKind(TrashBag, Kind, uniqueCast, removedDeckList)
    --zprint(uniqueCast, 'uniqueCast')
    local TrashContents = TrashBag.getObjects()
    local idex = tool.takeObjects_reverseIndex(TrashContents)
    for k,dex in ipairs(idex) do
        local obj = TrashContents[dex+1]
        if obj.tags[1] then
            local id = tool.setIDs(obj.tags)
            if id.discard then
                if id.kind == Kind then
                    for q,w in pairs(uniqueCast) do
                        if q == id.id then
                            moveObject(TrashBag.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                            break
                        end
                    end
                end
            end
        end
    end

    if (Kind == 'Small' or Kind == 'Large') then
        for _, deck in ipairs(removedDeckList) do
            TrashContents = deck.getObjects()
            idex = tool.takeObjects_reverseIndex(TrashContents)
            for k,dex in ipairs(idex) do
                local obj = TrashContents[dex+1]
                if obj.tags[1] then
                    local id = tool.setIDs(obj.tags)
                    if id.discard then
                        if id.kind == Kind then
                            for q,w in pairs(uniqueCast) do
                                if q == id.id then
                                    moveObject(deck.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                                    break
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return uniqueCast
end

function moveObject(obj, TrashBag, uniqueCastID, id)
    obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))
    obj.setPositionSmooth(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top')+Vector(0,uniqueCastID.Y,0)) --uniqueCastID.targetSource.getPosition()
    uniqueCastID.Y = uniqueCastID.Y + obj.getBounds().size.y+0.2
    Wait.condition(function() uniqueCastID.targetObj = Wait_AddCardtoDeck(obj, uniqueCastID) end, function() return not obj.isSmoothMoving() end)
end

function Wait_AddCardtoDeck(obj, uniqueCastID)--(card, discardZonePos, targetObj)
    local discardPile = uniqueCastID.targetObj
    if discardPile then
        discardPile = discardPile.putObject(obj)
    else
        obj.setPosition(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top'))--+Vector(0,0.05,0))
        --zprint(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top'))
        discardPile = obj
    end
    return discardPile
end
--- UniqueCastLocations(TrashBag, removedDeckList) -----------------------------
--- Build a list from trash and find the unique locations for each discard, then cast at that location and return found data.
--- Loop though trash objects and find the "DiscardMe_" Tag.. and then extract the "kind" of discard type as well as the unique Identifyer (ID) of the discard (DiscardMe_Bag, ID_BlueBagTest)
function UniqueCastLocations(TrashBag, removedDeckList)
    local z = {}
        for k,obj in ipairs(TrashBag.getObjects()) do
            if obj.tags[1] then
                local id = tool.setIDs(obj.tags)
                if id.discard then
                    z[id.id] = id.kind
                end
            end
        end

        for _, deck in ipairs (removedDeckList) do
            for _, card in ipairs(deck.getObjects()) do
                if card.tags[1] then
                    local id = tool.setIDs(card.tags)
                    if id.discard then
                        z[id.id] = id.kind
                    end
                end
            end
        end

        z = tool.cast.findContainer(z)
    return z
end
--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function removeDecksFormTrash(TrashBag, TrashBag_ContentData)
    local z = {}
        local indexesToRemove = tool.takeObjects_reverseIndex(TrashBag_ContentData, {Name='Deck'})
        for _,indexToRemove in ipairs (indexesToRemove) do
            local o = TrashBag.takeObject({ index = indexToRemove })
            o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,-70,0))
            o.setRotation(Vector(0,180,0))
            o.setLock(true)
            table.insert(z, o)
        end
    if z[1] then return z else return {} end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return TrashCan
