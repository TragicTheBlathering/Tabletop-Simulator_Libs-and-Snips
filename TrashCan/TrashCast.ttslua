local TrashCast = {}
--------------------------------------------------------------------------------
-- Global Variabels
local ShowCast = true -- cast debug visial
local zprint = require("/_libs/debug").zprint
local DiscardPlatforms = nil
--local ustring = require("/_libs/StringUtils")
--------------------------------------------------------------------------------
--- Main Function to Call ------------------------------------------------------
function TrashCast.findContainer(data)
    setVariables()
    --CastByString(data)
    return CastByString(data)
end

function setVariables()
    if not DiscardPlatforms then
        DiscardPlatforms = {}
        DiscardPlatforms.Discard_Bag               = {size=Vector(3,3,3), posOffset=Vector(0, 0, 0), platforms=getObjectsWithTag('Discard_Bag')}
        DiscardPlatforms.Discard_Platform_Small    = {size=Vector(2.5,1,4), posOffset=Vector(0, 0, 0), platforms=getObjectsWithTag('Discard_Platform_Small')}
        DiscardPlatforms.Discard_Platform_Large    = {size=Vector(3,1,5), posOffset=Vector(0, 0, 0), platforms=getObjectsWithTag('Discard_Platform_Large')}
    end

end

--------------------------------------------------------------------------------
--- Cast Code ------------------------------------------------------------------
function CastByString(uniqueObjTypeList)
    for platformType, objType in pairs(DiscardPlatforms) do
        for _, platform in pairs(DiscardPlatforms[platformType].platforms) do
            local targetType = platform.getGMNotes()
            for objType, _ in pairs(uniqueObjTypeList) do
                if string.find(string.lower(targetType), string.lower(objType), 1, true) then
                    --print(targetType..' : '..platform.getName()..' : '..platformType..' : '..objType)
                    uniqueObjTypeList[targetType] = cast(platform, platformType)
                end
            end
        end
    end
    --zprint(uniqueObjTypeList, 'uniqueObjTypeList')
    return uniqueObjTypeList
end

function cast(platform, platformType)
    --zprint(DiscardPlatforms,'DiscardPlatforms')
    local z = {}
    local zone = Physics.cast({
                    origin=platform.getPosition() + DiscardPlatforms[platformType].posOffset,
                    direction={0,1,0},
                    type=3,
                    max_distance=0,
                    size=DiscardPlatforms[platformType].size,
                    debug=ShowCast,
                })
    z = ProcessCast(platform, zone)
    return z
end

function ProcessCast(platform, zone)
    local z = {}
    for k, found in pairs(zone) do
        local obj = found.hit_object
        if obj.type == 'Card' or obj.type == 'Deck' or obj.type == 'Bag' then
            z.target = obj
        end
        if obj == platform then
            z.platform = obj
        end
    end
    return z
end

return TrashCast
