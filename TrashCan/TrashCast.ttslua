local TrashCast = {}
--------------------------------------------------------------------------------
-- Global Variabels
local ShowCast = true -- cast debug visial
local zprint = require("/_libs/debug").zprint
local DiscardPlatforms = nil
local YOffset = 1
--local ustring = require("/_libs/StringUtils")
function setVariables()
    if not DiscardPlatforms then
        DiscardPlatforms = {}
        DiscardPlatforms.DiscardType_Zone  = {size=Vector{1,1,1},   posOffset=Vector(0, 0, 0)}--, platforms=getObjectsWithTag('Discard_Zone')}
        DiscardPlatforms.DiscardType_Bag   = {size=Vector(3,3,3),   posOffset=Vector(0, 0, 0)}--, platforms=getObjectsWithTag('Discard_Bag')}
        DiscardPlatforms.DiscardType_Small = {size=Vector(2.5,1,4), posOffset=Vector(0, 0, 0)}--, platforms=getObjectsWithTag('Discard_Platform_Small')}
        DiscardPlatforms.DiscardType_Large = {size=Vector(3,1,5),   posOffset=Vector(0, 0, 0)}--, platforms=getObjectsWithTag('Discard_Platform_Large')}
    end
end

--------------------------------------------------------------------------------
--- Main Function to Call ------------------------------------------------------
function TrashCast.findContainer(data)
    setVariables()
    return CastByString(data)
end
--------------------------------------------------------------------------------
--- Cast Code ------------------------------------------------------------------
function CastByString(TrashIDList)
    for id,kind in pairs(TrashIDList) do
        local target = getObjectsWithAllTags({'DiscardTarget', id})
        if target[1] then target=target[1] end
        TrashIDList[id] = cast(target, DiscardPlatforms['DiscardType_'..kind], kind)
    end
    return TrashIDList
end

function cast(target, platformType, kind)
    local size = Vector(0,0,0)
        if string.lower(kind) == 'zone' then
            size = target.getScale()
        else
            size = platformType.size
        end

    local zone = Physics.cast({ origin=target.getPosition() + platformType.posOffset,
                                direction={0,1,0},
                                type=3,
                                max_distance=0,
                                size=size,
                                debug=ShowCast})
    return ProcessCast(target, zone, kind)
end

function ProcessCast(target, zone, kind)
    local z = {}
    local noCDB = true -- no card, deck or bag at cast location
        for k,found in pairs(zone) do
            local obj = found.hit_object
            if (obj.type == 'Card' or obj.type == 'Deck' or obj.type == 'Bag') then
                z.targetObj = obj
                noCDB = false
            end
            if obj == target then
                z.targetSource = obj
            end
            --[[if noCDB then
                z.target = target
            end]]
        end
        z.Y=YOffset
        z.kind=kind
    return z
end

return TrashCast
