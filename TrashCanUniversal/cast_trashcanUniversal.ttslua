local cast_trashcanUniversal = {}
--------------------------------------------------------------------------------
-- Global Variabels
local showCast = false -- cast debug visial
local trashSetting = {}
--------------------------------------------------------------------------------
--- Main Function to Call ------------------------------------------------------
function cast_trashcanUniversal.cast(trashIDList, trashseting)
    --print(logString(trashseting, "\n --- trashseting (cast_trashcanUniversal.cast)"))
    trashSetting = trashseting
    return castByStringKey(trashIDList)
end
--------------------------------------------------------------------------------
--- Cast Code ------------------------------------------------------------------
function castByStringKey(TrashIDList)--print(logString(TrashIDList, '\n ---- TrashIDList'))
    for id,_ in pairs(TrashIDList) do--print(id..' : '..' : '..trashSetting.discardTarget..' : '..tostring(kind))
        local target = getObjectsWithAllTags({trashSetting.discardTarget, id}) -- getObjectsWithAllTags() is an official TTS function. Get all objects in scene that have matching tags to a string table. ALL strings must be found to return true
        if target[1] then target=target[1] end -- there should be only 1 target, if more than one valid target, it only takes the FIRST found version
        TrashIDList[id] = cast(target, id)
    end
    return TrashIDList
end

function cast(target, id)
    --print(logString(cast, '\n ---- cast')); print(target.getName())
    local platform = {size=Vector(2,2,2), posOffset=Vector(0, 0.7, 0), originTarget = target.getPosition()}
    if target.type == 'Scripting' then
        platform.size = target.getScale()
        platform.posOffset=Vector(0,0,0)
    end

    local zone = Physics.cast({ origin=platform.originTarget + platform.posOffset,
                                direction={0,1,0},
                                type=3,
                                max_distance=0,
                                size=platform.size,
                                debug=showCast})--print('INSIDE CAST')
    return processCast(target, zone, id)
end

function processCast(target, zone, id)--print(logString(id, '\n ---- id'))
    local no_cardDeckBag = true
    local z = {}

    if zone[1] then
        z.platform = target
        for k,found in pairs(zone) do
            local obj = found.hit_object
            if (obj.type == 'Card' or obj.type == 'Deck' or obj.type == 'Bag') then--print('Card Deck or Bag : '..target.getName()..' : '..obj.getName())
                z.targetToMoveAbove = obj
                z.Y=setYOffset(z)
                no_cardDeckBag = false
            end
            if no_cardDeckBag then--print('no_cardDeckBag : '..target.getName()..' : '..obj.getName())
                z.targetToMoveAbove = target
                z.Y=setYOffset(z)
            end
        end
    else
        z.platform = target
        z.targetToMoveAbove = target
        z.Y=setYOffset(z)
    end
    return z
end

function setYOffset(id)
    local obj = id.targetToMoveAbove
    return obj.getPosition().y + getSizeofObj(obj).y + 0.5
end

function getSizeofObj(obj)
    local size = obj.getBoundsNormalized().size
    return size
end

return cast_trashcanUniversal
