local cast_trashcanUniversal = {}
--------------------------------------------------------------------------------
-- Global Variabels
local ShowCast = true -- cast debug visial
--local DiscardPlatforms = nil
--local YOffset = 1

local trashSetting = {}
--------------------------------------------------------------------------------
--- Main Function to Call ------------------------------------------------------
function cast_trashcanUniversal.cast(trashIDList, treshseting)
    trashSetting = treshseting
    --print('\n-------------------------------\n +++ Inside Cast +++ \n-------------------------------')
    return castByString(trashIDList, trashSetting)
end
--------------------------------------------------------------------------------
--- Cast Code ------------------------------------------------------------------
function castByString(TrashIDList)
    --print(logString(TrashIDList, '\n ---- TrashIDList'))
    for id,kind in pairs(TrashIDList) do
        local target = getObjectsWithAllTags({trashSetting.discardTarget, id}) -- getObjectsWithAllTags() is an official TTS function, not yet added to API page
        --print(logString(target, '\n ---- target'))
        --print(id..' : '..kind)
        if target[1] then target=target[1] end -- there should be only 1 target, if more than one vlid target, it only takes the FIRST found version
        TrashIDList[id] = cast(target, id, kind)
    end
    return TrashIDList
end

function cast(target, id, kind)
    local platform = {size=Vector(2,2,2), posOffset=Vector(0, 0.9, 0)}
    local originTarget = Vector(0,0,0)
    local size = Vector(0,0,0)
        if target.type == 'Scripting' then
            size = target.getScale()
        else
            size = platform.size
        end

    if kind ~= trashSetting.specialCase then
        originTarget = target.getPosition() + platform.posOffset
    end

    local zone = Physics.cast({ origin=originTarget,
                                direction={0,1,0},
                                type=3,
                                max_distance=0,
                                size=size,
                                debug=ShowCast})
            --print('INSIDE CAST')
    return processCast(target, zone, id, kind)
end

function processCast(target, zone, id, kind)
    --print('INSIDE ProcessCast')
    local z = {}
    local YOffset = 1 -- uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2
    local no_cardDeckBag = true
    if kind == trashSetting.specialCase then
        -- Do nothing in specialCase
    else
        if not zone[1] then
            print('5-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
            --z.targetObj = target
            --z.targetToMoveAbove = target
        else
            for k,found in pairs(zone) do
                local obj = found.hit_object
                z.platform = target
                if (obj.type == 'Card' or obj.type == 'Deck' or obj.type == 'Bag') then
                    --print('Card Deck or Bag : '..target.getName()..' : '..obj.getName())
                    z.targetToMoveAbove = obj
                    no_cardDeckBag = false
                end
                if no_cardDeckBag then
                    --print('no_cardDeckBag : '..target.getName()..' : '..obj.getName())
                    z.targetToMoveAbove = target
                end
            end
            --print(obj)
        end
    end
    z.id=id
    z.kind=kind
    z.Y=setYOffset(z)
    --print(logString(z,'\n--- Z'))
    return z
end

function setYOffset(id)
    local obj = id.targetToMoveAbove
    return obj.getPosition().y + getSizeofObj(obj).y + 0.5
end
--[[
if obj.getData().Name == "Card" then
print('\n+++++++++++++++++++++++++')
print(obj.getData().Name)
yOffset = 1
else
yOffset = getSizeofObj(obj).y
end

local offset = obj.getPosition().y + yOffset + 0.5

]]
function getSizeofObj(obj)
    local size = obj.getBoundsNormalized().size
    return size
end

return cast_trashcanUniversal
