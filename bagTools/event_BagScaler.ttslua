local event_BagScaler = {}
    local tool = {}
          tool.wait = {}
          tool.wait.dropIntoBox=require("/_libs/waitUtils/waitUtils").dropIntoBox

          tool.findTag = require("/_libs/tagUtils/tagUtils").tagFoundinTagList

          tool.scaleBag=require("/_libs/bagTools/scaleBags").fromContents
          tool.setBagTexture=require("/_libs/bagTools/setBagTextureFromContents").simulateTokenStack
          tool.ejectInvalidObjs=require("/_libs/bagTools/ejectInvalidObjects").eject


    runExitBag = true
    changeImage = nil

function processBagScaler(bag, objData)
    runExitBag = false
    local bagTag = bag.getTags()
    for t,v in pairs(globalVar.scaleBag) do
        local tag = 'eventID_'..t
        --print(tag)
        if bag.hasTag(tag) then -- and
            local value = globalVar.scaleBag[t]
            --[[
            tool.scaleBag(bag, value) -- true means move UP

            Wait.frames(function()
                tool.setBagTexture(bag, value)
            end, 15)
            ]]
            changeImage = tool.scaleBag(bag, value)
            Wait.condition(function()
                changeImage = nil
                tool.setBagTexture(bag, value)
            end, function() return changeImage end)

            --[[

            if tool.scaleBag(bag, value) then
                tool.setBagTexture(bag, value)
            end
            ]]

        end
    end
    runExitBag = true
end

function event_BagScaler.enterContainer(bag, obj, idTag)
    if runExitBag then
        if bag.hasTag(idTag) then
            tool.wait.dropIntoBox(bag, obj, processBagScaler, time)
        end
    end
end

function event_BagScaler.exitContainer(bag, obj, idTag)
    if runExitBag then
        if bag.hasTag(idTag) then
            tool.wait.dropIntoBox(bag, obj, processBagScaler, time)
        end
    end
end


return event_BagScaler
