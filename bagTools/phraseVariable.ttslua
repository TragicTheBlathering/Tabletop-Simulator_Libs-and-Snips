local phraseVariable = {}

local tool = {}
    tool.hex=require("/_libs/colourUtils/colourUtils")

function phraseVariable.buildVariables(bag, d)
    --print('--=== Phraser ===--')
    --print(logString(d))
    local data = {}
        data.type = d.type
        data.pivot = d.pivot or "center"
        data.upsideDownBag = false
        data.scaleValue = d.value.scaleValue or 2.5
        data.origSizeY = d.value.origSize
        data.baseScale = d.value.baseScale
        data.basePos = d.value.basePos
        data.tags = {}
        data.empty = {}

        --print(logString(data.pivot,"\n---------------"))
        --data.pivot = string.lower(data.pivot)
        if data.pivot == "" then
            data.pivot = "center"
        else
            data.pivot = string.lower(data.pivot)
        end
        -- Is the bag upside down?
        local bagRot = bag.getRotation()
        if Vector(0, 0 ,bagRot.z):equals(Vector(0, 0, 180)) then
            data.upsideDownBag = true
            data.basePos = data.basePos + Vector(0, data.origSizeY, 0)
        end

        if string.find(string.lower(d.empty), string.lower("http")) then
            data.empty.url = d.empty
        elseif string.find(string.lower(d.empty), string.lower("#")) then
            data.empty.hex = tool.hex.hexToRgb(d.empty)
        end

        if d.tags == nil or next(d.tags) == nil then
            printToAll("NOTE : to be coded. No Table of any sort is found.. resort to using the top object in bag no matter what it is as texture, ", "Orange")
            data.tags = false
        else
            local col = nil
            if d.type.hex then -- If using HexColour to change colour
                if tool.hex.isHexColor(d.type.hex) then -- if no hex found set to WHITE. else use hex colour
                    col = tool.hex.hexToRgb(d.type.hex)
                else
                    col = Color.fromString("White")
                end

                for k,v in pairs(d.tags) do
                    data.tags[v] = col
                end

            elseif d.type.url then -- if using custom URLS then simply copy tag data
                data.tags = d.tags

            elseif d.type.contents then -- if using bag objects, move tags to keys to match other options
                for k,v in pairs(d.tags) do
                    data.tags[k] = v
                end
            end
        end
    return data
end

return phraseVariable

--[[


]]
