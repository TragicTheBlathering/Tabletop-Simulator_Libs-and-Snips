
function zzzxmlTest()
    local xml = self.UI.getXmlTable()
    local newValue = setValue()
    local path, foundTable = findTableById(xml, "infoText")
        editTableValue(xml, path, newValue)
        editTableAttribute(xml, path, "fontSize", "30")
    self.UI.setXmlTable(xml)

    dprint('path', path)
end

function setValue()
    c.teal = [[<textcolor color="#00f3ff">]]
    c.c  = [[</textcolor>]]
    local txt = "This is a test "..c.teal.."I should be a teal colour"..c.c..", it just printed the code as a string"
    return txt
end

-- Recursively searches a table and its sub-tables for an attributes.id that matches the targetId
function findTableById(tbl, targetId, path)
    path = path or {} -- Tracks the current path
    for key, value in pairs(tbl) do
        if type(value) == "table" then
            if value.attributes and value.attributes.id == targetId then
                return path, value -- Return the path and the table containing both `value` and `attributes`
            end
            -- Recursively search children
            local newPath = {unpack(path)}
            table.insert(newPath, key)
            local foundPath, foundTable = findTableById(value, targetId, newPath)
            if foundPath then return foundPath, foundTable end
        end
    end
    return nil, nil -- If no match is found
end

-- Navigates to the table given a path
function getTableByPath(root, path)
    local current = root
    for _, key in ipairs(path) do
        current = current[key]
        if not current then return nil end
    end
    return current
end

-- Edits or creates a specific attribute in the `attributes` sub-table
function editTableAttribute(root, path, key, newValue)
    local targetTable = getTableByPath(root, path)
    if targetTable then
        targetTable = targetTable[1]
        -- Ensure the `attributes` table exists
        targetTable.attributes = targetTable.attributes or {}
        -- Create or update the key with the new value
        targetTable.attributes[key] = newValue
    else
        error("Target table not found!")
    end
end

-- Edits or creates the 'value' key in the found table
function editTableValue(root, path, newValue)
    local targetTable = getTableByPath(root, path)
    dprint('targetTable', targetTable)
    if targetTable then
        targetTable = targetTable[1]
        -- Create or update the 'value' key with the new value
        targetTable.value = newValue
    else
        error("Target table not found!")
    end
end



--[[ This is one that will not allow adding of keys

-- Edits the 'value' key in the found table
function editTableValue(root, path, newValue)
    local targetTable = getTableByPath(root, path)[1]
    dprint('targetTable', targetTable)
    if targetTable and targetTable.value ~= nil then
        targetTable.value = newValue -- Update the existing 'value' key
    else
        error("Target table does not have a 'value' key!")
    end
end

-- Edits a specific attribute in the `attributes` sub-table
function editTableAttribute(root, path, key, newValue)
    local targetTable = getTableByPath(root, path)[1]
    if targetTable and targetTable.attributes then
        targetTable.attributes[key] = newValue
    else
        error("Target table or attributes not found!")
    end
end
]]