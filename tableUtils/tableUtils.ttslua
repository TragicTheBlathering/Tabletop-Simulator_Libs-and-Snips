local tableUtils = {}

    function tableUtils.sortAlpha(t)
        table.sort(t)
        return t
    end

    function tableUtils.isTable(value)
        return type(value) == "table"
    end

    -- Merge to tables, skipping any duplicate keys.
    -- If either table is nil or {} return the other tbl
    -- if both are nil, return nil

    function tableUtils.deepMerge(OrigTable, addTblToOrig)
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        local table1 = nil
        local table2 = nil

        if OrigTable == nil or (type(OrigTable) == "table" and next(OrigTable) ~= nil) then
            table1 = OrigTable
        end

        if addTblToOrig == nil or (type(addTblToOrig) == "table" and next(addTblToOrig) ~= nil) then
            table2 = addTblToOrig
        end

        if table1 == nil and table2 == nil then
            --print('bothNil')
            return nil

        elseif table1 ~= nil and table2 == nil then
            --print('t1~=, t2=')
            return table1

        elseif table1 == nil and table2 ~= nil then
            --print('t1=, t2~=')
            return table2

        elseif table1 ~= nil and table2 ~= nil then
            --print('t1~=, t2~=')
            local result = {}
            -- Merge keys from table1 that are not in table2
            for key, value in pairs(table1) do
                if not table2[key] then
                    result[key] = value
                else
                    -- Recursively merge subtables
                    result[key] = deepMerge(value, table2[key])
                end
            end

            -- Merge keys from table2 that are not in table1
            for key, value in pairs(table2) do
                if not table1[key] then
                    result[key] = value
                end
            end
            return result
        end

    return result
end

    function tableUtils.merge(OrigTable, addTblToOrig)
        local table1 = nil
        local table2 = nil

        if OrigTable == nil or (type(OrigTable) == "table" and next(OrigTable) ~= nil) then
            table1 = OrigTable
        end

        if addTblToOrig == nil or (type(addTblToOrig) == "table" and next(addTblToOrig) ~= nil) then
            table2 = addTblToOrig
        end

            if table1 == nil and table2 == nil then
                --print('bothNil')
                return nil

            elseif table1 ~= nil and table2 == nil then
                --print('t1~=, t2=')
                return table1

            elseif table1 == nil and table2 ~= nil then
                --print('t1=, t2~=')
                return table2

            elseif table1 ~= nil and table2 ~= nil then
                --print('t1~=, t2~=')
                local result = {}
                -- Copy keys from table1
                for key, value in pairs(table1) do
                    result[key] = value
                end

                -- Copy keys from table2, ignoring duplicates
                for key, value in pairs(table2) do
                    if result[key] == nil then
                        result[key] = value
                    end
                end
                return result
            end

    end

    function tableUtils.removeDuplicates(t, key)
        -- make unique keys
        local hash = {}
        if key then
            for _,v in ipairs(t) do
                hash[v[key]] = v
            end
        else
            for _,v in ipairs(t) do
                hash[v] = v
            end
        end
        -- transform keys back into values
        local res = {}
        for k,v in pairs(hash) do
            res[#res+1] = v
        end

        return res
    end

    function tableUtils.tableSize(t)
        local count = 0
        if t ~= nil then
            for key,value in pairs(t) do count = count + 1 end
        end
        return count
    end


    function tableUtils.identicalValues(t)
        local first = t[1]
         for i = 2, #t do
             if t[i] ~= first then
                 return false
             end
         end
         return true
    end

    --[[function tableUtils.tableSize(t)
        local count = 0
        for key,value in pairs(t) do count = count + 1 end
        return count
    end]]

    function tableUtils.editTable_recursiveStringKey(tbl, key, newValue)
        for k, v in pairs(tbl) do
            if type(v) == "table" then
                if editTable_recursiveStringKey(v, key, newValue) then
                    return true
                end
            else
                if type(k) == "string" and string.lower(k) == string.lower(key) then
                    tbl[k] = newValue
                    return true
                end
            end
        end
        return false
    end

    function tableUtils.deepcopy(orig)
        local copy
        if type(orig) == 'table' then
            copy = {}
            for k, v in next, orig, nil do
                copy[deepcopy(k)] = deepcopy(v)
            end
            setmetatable(copy, deepcopy(getmetatable(orig)))
        else
            copy = orig
        end
        return copy
    end

    --- Test Function
    function tableUtils.test()
        printToAll('----=== tableUtils IS WORKING ===----', 'Green')
    end
return tableUtils

--[[

THESE ARE TMP CODES I PLAY WITHOUT

function reverseList(list)
    local z = {}
         for i = #list, 1, -1 do
             table.insert(z, list[i])
         end
    return z
end

function sortObjectListbyName(list)
    table.sort(list, function(a, b)
        if a.getName() ~= '' and b.getName() ~= '' then
            --if both have names then sort based on their nicknames
            return a.getName() < b.getName()
        elseif a.getName() ~= '' then
            --if only a has a nickname then a should be ahead of b
            return true
        elseif b.getName() ~= '' then
            --if only b has a nickname then b should be ahead of a
            return false
        else
            --if neither have nicknames then sort based on their names
            return a.name <  b.name
        end
        return true
    end)
end

function removeDuplicates(t, key)
    -- make unique keys
    local hash = {}
    if key then
        for _,v in ipairs(t) do
            hash[v[key]] -- = v
        --[[end
    else
        for _,v in ipairs(t) do
            hash[v] = v
        end
    end
    -- transform keys back into values
    local res = {}
    for k,v in pairs(hash) do
        res[#res+1] = v
    end

    return res
end

function SortAlpha(list)
    local z = {}
        list = removeDuplicates(list, 'guid')

        local sortName   = {}
        local sortNoName = {}
        for k,v in pairs(list) do
            local name = v.obj.getName()
            if name == '' then
                name = v.obj.name..'_'..v.obj.getGUID()
                table.insert(sortNoName, name)
            else
                name = name..'_'..v.obj.getGUID()
                table.insert(sortName, name)
            end
        end

        table.sort(sortName)
        table.sort(sortNoName)
        --zprint(sortName, '\nsortName')

        for _, name in ipairs(sortName) do
            for k , o in pairs(list) do
                if name == o.obj.getName()..'_'..o.obj.getGUID() then
                    table.insert(z, o.obj)
                end
            end
        end

        for _, name in ipairs(sortNoName) do
            for k , o in pairs(list) do
                if name == o.obj.name..'_'..o.obj.getGUID() then
                    table.insert(z, o.obj)
                end
            end
        end
    return z
end

]]
