local tagUtils = {}
--------------------------------------------------------------------------------
function tagUtils.findTagString(tagTable, str)
    for k, line in pairs(tagTable) do
        if string.find(string.lower(line), string.lower(str), 1, true) then
            return line
        end
    end
end

function tagUtils.tagFoundinTagList(tagTable, str, find)
    if tagTable then
        find = find or false
        for k, line in pairs(tagTable) do
            if find then
                if string.find(string.lower(line), string.lower(str), 1, true) then
                    return true
                end
            else
                if string.lower(line) == string.lower(str) then
                    return true
                end
            end
        end
        return false
    else
        return false
    end
end
--- TagFound --- ---------------------------------------------------------------
--- search a tag list for another tag. useFind is a bool. flase / mission  will look for exact match. true will use string.find()
function tagUtils.tagFound(tags, keys, useFind) -- useFind BOOL : use == or use string.find()
    useFind = useFind or false

    if useFind then
        for _, tag in pairs(tags) do
            for _, key in pairs(keys) do
                if string.find(string.lower(tag), string.lower(key), 1, true) then
                    return true
                end
            end
        end
    else
        for _, tag in pairs(tags) do
            for _   , key in pairs(keys) do
                if string.lower(tag) == string.lower(key) then
                    return true
                end
            end
        end
    end
    return false
end
--------------------------------------------------------------------------------
--- TagFound --- ---------------------------------------------------------------
--- allObjectInBagHaveTagThatMatchesBag ----------------------------------------
-- Seach all objects in a container and is any object in container has no tags in common with bag then report
function tagUtils.allObjectInBagHaveTagThatMatchesBag(bag,key)
    --print('    : In Tag Find Code\n')
    local data = { objsNotMissingTag = true, tag = nil }--, badObj = nil }

    -- Find Tag with Matching KEY on the bag itself
    for k,line in pairs(bag.getTags()) do
        if string.find(string.lower(line), string.lower(key), 1, true) then
            data.tag = line
            break
        else
            data.tag = false
        end
    end

    -- Find if the Tag found on bag is on ALL the objects in bag.
    if data.tag then -- This is actually testing if FLASE... so if FALSE (as in key not found) do not do below
        --print('Inside For Loop')
        local contents = bag.getObjects()
        for k,o in pairs(contents) do
            contents[k] = false
            for _,t in pairs(o.tags) do
                if t == data.tag then
                    --print('FOUND == t : '..t..' : bagTag : '..data.tag)
                    --data.badObj = false
                    contents[k] = true
                    break
                end
            end
        end

        -- check that all object vales resolve as true, if any resolve as false we know an object is missing the correct tag
        for k,v in pairs (contents) do
            --print('Loop 2')
            if not v then
                data.objsNotMissingTag = false
                break
            end
        end

    end

    return data
end
--------------------------------------------------------------------------------
-- This will search a bag and all the object tags in it.
-- If the tag is found on ALL objects in the bag, it returns true
function tagUtils.tagIsFoundOnAllObjectsInBag(targetString, contents)
    local listOfLists = {}
    for k,o in pairs(contents) do
        table.insert(listOfLists, o.tags)
    end

        for _, sublist in ipairs(listOfLists) do
        local foundInSublist = false

        for _, element in ipairs(sublist) do
            if string.lower(element) == string.lower(targetString) then
                --print(element.." : "..targetString)
                foundInSublist = true
                break
            end
        end

        if not foundInSublist then
            return false  -- String not found in this sublist
        end
    end
    return true  -- String found in all sublists
end
--------------------------------------------------------------------------------
-- This will search to lists of strings (tags) vs another list with strings as keys
-- and return a list of tags that are in both the string list and the keylist,
-- if only only one is found it will return a string.
function tagUtils.findCommonTagBetweenTagListandTagListKeys(listKeys, list2)
    --print(logString(list1, '\n --- LIST1'))
    --print(logString(list2, '\n --- LIST2'))

    local commonStrings = {}

    for key1, _ in pairs(listKeys) do
        for _, element2 in ipairs(list2) do
            if string.lower(key1) == string.lower(element2) then
                table.insert(commonStrings, key1)
                break  -- Move to the next key in list1 after a match is found
            end
        end
    end

    if #commonStrings == 1 then
        return commonStrings[1]
    end
    return commonStrings
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return tagUtils
