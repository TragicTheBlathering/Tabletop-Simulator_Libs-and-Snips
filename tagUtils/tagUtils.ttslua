local tagUtils = {}

local tools = {}
      tools.tags=require("/_libs/setIndexType/setIndexType").tags -- obj.Tag or obj.tag


-- Test an object to see if it comes form getObject() or getData().ContainedObjects
-- return the tags
function tagUtils.getTagKey(objList)
    if objList[1] then
        if objList[1].Nickname then
            return 'Tags', true
        else
            return 'tags', false
        end
    end
    --print("--== : tagUtils.getTagKey : obj")
    return false, false
end


function tagUtils.singleTagFoundinTagList(tagTable, str, find)
    if tagTable then
        find = find or false
        for k, line in pairs(tagTable) do
            if find then
                if string.find(string.lower(line), string.lower(str), 1, true) then
                    return true
                end
            else
                if string.lower(line) == string.lower(str) then
                    return true
                end
            end
        end
        return false
    else
        return false
    end
end

--- TagFound --- ---------------------------------------------------------------
--- search a tag list for another tag. useFind is a bool. flase / mission  will look for exact match. true will use string.find()
function tagUtils.isTagFound_ObjList(objList, tags, subStringSearch) -- useFind BOOL : use == or use string.find()
    local tKey = tagUtils.getTagKey(objList) -- set o.Tags or o.tags
    local tagList = {}

    if type(tags) == "string" then -- if tag to search is a single string, put it inside a table, otherwise use table as is.
        tags = {string.lower(tags)}
    end

    if tKey then
        for k,o in pairs(objList) do
            if o[tKey] then
                for k, ot in pairs(o[tKey]) do
                    local t = string.lower(ot)
                    tagList[t] = false
                end
            end
        end

        for objTags,_  in pairs(tagList) do
            for k, listTag in pairs(tags) do
                if subStringSearch then
                    if string.find(objTags, string.lower(listTag), 1, true) then
                        return true
                    end
                else
                    if objTags == tostring(listTag) then
                        return true -- retun true if at least 1 tag matchs
                    end
                end
            end
        end
    end
    return false
end


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return tagUtils
