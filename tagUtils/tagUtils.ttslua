local tagUtils = {}

local tools = {}
      tools.tags=require("/_libs/setIndexType/setIndexType").tags -- obj.Tag or obj.tag
      tools.tblSize=require("/_libs/tableUtils/tableUtils").tableSize

-- Test an object to see if it comes form getObject() or getData().ContainedObjects
-- return the tags
function tagUtils.getTagKey(objList)
    if objList[1] then
        if objList[1].Nickname then
            return 'Tags', true
        else
            return 'tags', false
        end
    end
    --print("--== : tagUtils.getTagKey : obj")
    return false, false
end

-- Return true or false is a single tag is found in a list of tags
function tagUtils.singleTagFoundinTagList(tagTable, str, find)
    if tagTable then
        find = find or false
        for k, line in pairs(tagTable) do
            if find then
                if string.find(string.lower(line), string.lower(str), 1, true) then
                    return true
                end
            else
                if string.lower(line) == string.lower(str) then
                    return true
                end
            end
        end
        return false
    else
        return false
    end
end

--- TagFound --- ---------------------------------------------------------------
--- search a tag list for another tag. useFind is a bool. flase/nil ==  look for exact match. true will use string.find()
function tagUtils.isTagFound_ObjList(objList, tags, subStringSearch) -- useFind BOOL : use == or use string.find()
    local tKey = tagUtils.getTagKey(objList) -- set o.Tags or o.tags
    local tagList = {}

    if type(tags) == "string" then -- if tag to search is a single string, put it inside a table, otherwise use table as is.
        tags = {string.lower(tags)}
    end

    if tKey then
        for k,o in pairs(objList) do
            if o[tKey] then
                for k, ot in pairs(o[tKey]) do
                    local t = string.lower(ot)
                    tagList[t] = false
                end
            end
        end

        for objTags,_  in pairs(tagList) do
            for k, listTag in pairs(tags) do
                if subStringSearch then
                    if string.find(objTags, string.lower(listTag), 1, true) then
                        return true
                    end
                else
                    if objTags == tostring(listTag) then
                        return true -- retun true if at least 1 tag matchs
                    end
                end
            end
        end
    end
    return false
end

function tagUtils.returnTagsfoundinTagList(tagList, objList, useKeys) -- useFind BOOL : use keys insead of values form tagList
    useKeys = useKeys or false
    local tagListReturn = {}

    if type(tagList) == "string" then -- if tagList to search is a single string, put it inside a table, otherwise use table as is.
        tagList = {string.lower(tagList)}
    end

    for k, tag in pairs(objList) do
        local objTag = string.lower(tag)
        for key, tag in pairs(tagList) do
            local comparTag = useKeys and key or tag
            if objTag == string.lower(comparTag) then
                table.insert(tagListReturn, comparTag)
            end
        end
    end

    if tools.tblSize(tagListReturn) == 0 then
        tagListReturn = false
    elseif tools.tblSize(tagListReturn) == 1 then
        tagListReturn = tagListReturn[1]
    end

    return tagListReturn
end
--[[ -- local comparTag = useKeys and key or tag
(This code dose the same as the if statment below)
local comparTag = nil
if useKeys then
    comparTag = key
else
    comparTag = tag
end]]

--------------------------------------------------------------------------------
-- This will search a bag and all the object tags in it.
-- If the tag is found on ALL objects in the bag, it returns true
function tagUtils.tagIsFoundOnAllObjectsInBag(targetString, contents)
    local listOfLists = {}
    for k,o in pairs(contents) do
        table.insert(listOfLists, o.tags)
    end

        for _, sublist in ipairs(listOfLists) do
        local foundInSublist = false

        for _, element in ipairs(sublist) do
            if string.lower(element) == string.lower(targetString) then
                --print(element.." : "..targetString)
                foundInSublist = true
                break
            end
        end

        if not foundInSublist then
            return false  -- String not found in this sublist
        end
    end
    return true  -- String found in all sublists
end

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return tagUtils
