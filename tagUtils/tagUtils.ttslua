local tagUtils = {}

local tools = {}
      tools.tags=require("/_libs/setIndexType/setIndexType").tags -- obj.Tag or obj.tag
      tools.tblSize=require("/_libs/tableUtils/tableUtils").tableSize

-- Test an object to see if it comes form getObject() or getData().ContainedObjects
-- return the tags
function tagUtils.getTagKey(objList)
    if objList[1] then
        if objList[1].Nickname then
            return 'Tags', true
        else
            return 'tags', false
        end
    end
    --print("--== : tagUtils.getTagKey : obj")
    return false, false
end

--[[ Wrapper for getObjectsWithAllTags() the default TTS function.
     It takes a tagList and additional Tag list, then finds ALL objects with ALL tags
     if only 1 object it found it returns that single object, or an object list, or nil
     Send as many tags or tags list as you like. It can take Lists, or single strings for each arg]]
function tagUtils.getObjectsWithAllTags_FromTagLists(...)
    local args = {...}
    local tagLists = {}
    for k, v in pairs(args) do
        if type(v) == "string" then
            table.insert(tagLists, {v})
        else
            table.insert(tagLists, v)
        end
    end

    local tagList = {}
    for _, tbl in ipairs(tagLists) do
      for _, element in ipairs(tbl) do
          table.insert(tagList, element)
      end
    end

    local objList = getObjectsWithAllTags(tagList)
    if #objList == 1 then
        return objList[1]
    elseif #objList > 1 then
        return objList
    end

    return nil
end

-- Return true or false is ALL tags are found in a list of tags
function tagUtils.allTagsInListFoundinTagList(ListToSearch, tagList, find)
    find = find or false
    local list = {}
    for k,key in pairs(tagList) do
        list[key] = false
    end

    for k, line in pairs(ListToSearch) do
        for key, _ in pairs(list) do
            if find then
                if string.find(string.lower(line), string.lower(key), 1, true) then
                    list[key] = true
                end
            else
                if line == key then
                    list[key] = true
                end
            end
        end
    end
    for k, found in pairs(list) do
        if not found then
            return false
        end
    end
    return true
end

--[[
local list = {}
for k,v in pairs(tagList) do
    list[v] = false
end

for k,v in pairs(ListToSearch) do
    for t, o in pairs(list) do
        if find then
            if string.find(string.lower(t), string.lower(v), 1, true) then
                print(v.." : "..t)
                list[v] = true
            end
        else
            if t == v then
                list[v] = true
            end
        end
    end
end

for k,v in pairs(list) do
    if not v then
        return false
    end
end
]]

-- Return true or false is a single tag is found in a list of tags
function tagUtils.singleTagFoundinTagList(tagTable, str, find)
    if tagTable then
        find = find or false
        for k, line in pairs(tagTable) do
            if find then
                if string.find(string.lower(line), string.lower(str), 1, true) then
                    return true
                end
            else
                if string.lower(line) == string.lower(str) then
                    return true
                end
            end
        end
        return false
    else
        return false
    end
end

--- TagFound --- ---------------------------------------------------------------
--- search a tag list for another tag. useFind is a bool. flase/nil ==  look for exact match. true will use string.find()
function tagUtils.isTagFound_ObjList(objList, tags, subStringSearch) -- useFind BOOL : use == or use string.find()
    local tKey = tagUtils.getTagKey(objList) -- set o.Tags or o.tags
    local tagList = {}

    if type(tags) == "string" then -- if tag to search is a single string, put it inside a table, otherwise use table as is.
        tags = {string.lower(tags)}
    end

    if tKey then
        for k,o in pairs(objList) do
            if o[tKey] then
                for k, ot in pairs(o[tKey]) do
                    local t = string.lower(ot)
                    tagList[t] = false
                end
            end
        end

        for objTags,_  in pairs(tagList) do
            for k, listTag in pairs(tags) do
                if subStringSearch then
                    if string.find(objTags, string.lower(listTag), 1, true) then
                        return true
                    end
                else
                    if objTags == tostring(listTag) then
                        return true -- retun true if at least 1 tag matchs
                    end
                end
            end
        end
    end
    return false
end

function tagUtils.returnTagsfoundinTagList(tagList, objList, useKeys) -- useFind BOOL : use keys insead of values form tagList
    useKeys = useKeys or false
    local tagListReturn = {}

    if type(tagList) == "string" then -- if tagList to search is a single string, put it inside a table, otherwise use table as is.
        tagList = {string.lower(tagList)}
    end

    for k, tag in pairs(objList) do
        local objTag = string.lower(tag)
        for key, tag in pairs(tagList) do
            local comparTag = useKeys and key or tag
            if objTag == string.lower(comparTag) then
                table.insert(tagListReturn, comparTag)
            end
        end
    end

    if tools.tblSize(tagListReturn) == 0 then
        tagListReturn = false
    elseif tools.tblSize(tagListReturn) == 1 then
        tagListReturn = tagListReturn[1]
    end

    return tagListReturn
end
--[[ -- local comparTag = useKeys and key or tag
(This code dose the same as the if statment below)
local comparTag = nil
if useKeys then
    comparTag = key
else
    comparTag = tag
end]]

--------------------------------------------------------------------------------
-- This will search a bag and all the object tags in it.
-- If the tag is found on ALL objects in the bag, it returns true
function tagUtils.tagIsFoundOnAllObjectsInBag(targetString, contents)
    local listOfLists = {}
    for k,o in pairs(contents) do
        table.insert(listOfLists, o.tags)
    end

        for _, sublist in ipairs(listOfLists) do
        local foundInSublist = false

        for _, element in ipairs(sublist) do
            if string.lower(element) == string.lower(targetString) then
                --print(element.." : "..targetString)
                foundInSublist = true
                break
            end
        end

        if not foundInSublist then
            return false  -- String not found in this sublist
        end
    end
    return true  -- String found in all sublists
end

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return tagUtils
