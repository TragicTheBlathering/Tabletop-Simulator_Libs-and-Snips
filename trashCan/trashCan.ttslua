local trashCan = {}
local debug = require("/_libs/debug/debug")

local tool = require("/_libs/takeObjectUtils/takeObjectUtils")
      tool.cast = require("/_libs/trashCan/trashCast")
      tool.findTag = require("/_libs/tagUtils/tagUtils").findTagString
      tool.gameSpecific = require("/ArkhamHorror/Trash_GameSpesific")

local KIND = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='Zone', SpecialCase='SpecialCase', Deck='Deck'}

--------------------------------------------------------------------------------
--- Function to Call with EVENT ------------------------------------------------
function trashCan.process(bag)
    runTrash(bag)
end
--------------------------------------------------------------------------------
--- remove any decks from the trash and move to processing ---------------------
function runTrash(TrashBag)
    --printToAll('Trash 01 : runTrash!')
    local removedDeckList = removeDecksFormTrash(TrashBag, TrashBag.getData().ContainedObjects)
    Wait.frames(function() processBag(TrashBag, removedDeckList) end, 5) -- Wait a bit to ensure decks have spawned after being taken out of bag.
end
--------------------------------------------------------------------------------
--- runTrash -------------------------------------------------------------------
function processBag(TrashBag, removedDeckList)
    --print('Trash 02 : processBag!')
    local uniqueCast = UniqueCastLocations(TrashBag, removedDeckList)
    ProcessKind(TrashBag, uniqueCast, removedDeckList)
end
--------------------------------------------------------------------------------
--- runTrash -------------------------------------------------------------------
function ProcessKind(TrashBag, uniqueCast, removedDeckList)
    --print('Move : ProcessKind')
 -- Process the remaining contents of TrashBag (remeber all decks have been removed)
    local TrashContents = TrashBag.getObjects()
    local idex = tool.reverseIndex(TrashContents)
    for k,dex in ipairs(idex) do
        local obj = TrashContents[dex+1]
        if obj.tags[1] then
            local id = setIDs(obj.tags)
            --zprint(id,'ID++++')
            --print('??')
            if id.discard then
                if id.kind == KIND.SpecialCase then
                    print('Special Case - OBJ')
                    moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)
                else
                    for q,w in pairs(uniqueCast) do
                        if q == id.id then
                            moveObject(TrashBag.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                            break
                        end
                    end
                end
            else
                if id.delete then
                    destroyObject(TrashBag.takeObject({index = dex}))
                end
            end
        end
    end
 -- Process remaing removed Decks
    for _, deck in ipairs(removedDeckList) do
        TrashContents = deck.getObjects()
        idex = tool.reverseIndex(TrashContents)
        for k,dex in ipairs(idex) do
            local obj = TrashContents[dex+1]
            if obj.tags[1] then
                local id = setIDs(obj.tags)
                if id.discard then
                    if id.kind == KIND.SpecialCase then
                    print('Special Case - DECK')
                        moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)
                    else
                        for q,w in pairs(uniqueCast) do
                            if q == id.id then
                                moveObject(deck.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                                break
                            end
                        end
                    end
                else
                    if id.delete then
                        destroyObject(TrashBag.takeObject({index = dex}))
                    end
                end
            end
        end
    end

end
--------------------------------------------------------------------------------
--- moveSpecialCase ------------------------------------------------------------
-- This calls the "specialCase" code.
function moveSpecialCase(obj, TrashBag)
    tool.gameSpecific.specialCase(obj,TrashBag)
end
--******************************************************************************
--- moveObject -----------------------------------------------------------------
--******************************************************************************
-- This gose through list and moves all items into postion. Then once moved calls a "add to deck" function to snap them into place with putObject() rather than just fall via physisc
function moveObject(obj, TrashBag, uniqueCastID, id)
    --print('?? - moveObject')
    --zprint(uniqueCastID,'uniqueCastID')
    --if uniqueCastID.targetSource.type == 'Scripting' then
        --If I ever need more advanced control when sending to script zones.. I can put stuff in here and move the rest of ths block into ELSE
    --end
    Wait.frames(function()
        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))
        obj.setPositionSmooth(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top')+Vector(0,uniqueCastID.Y,0)) --uniqueCastID.targetSource.getPosition()
        uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2
        Wait.condition(function() uniqueCastID.targetObj = Wait_AddCardtoDeck(obj, uniqueCastID) end, function() return not obj.isSmoothMoving() end)
    end,1)
end

function getSizeofObj(obj)
    local size = obj.getBoundsNormalized().size
    return size
end

function Wait_AddCardtoDeck(obj, uniqueCastID)--(card, discardZonePos, targetObj)
    local discardPile = uniqueCastID.targetObj
    if discardPile then
        discardPile = discardPile.putObject(obj)
    else
        obj.setPosition(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top'))--+Vector(0,0.05,0))
        discardPile = obj
    end
    -- If the discard obejct is a DECK pile.. make sure it is named. This will use the ID_?? As the base for the DiscardPile Name
    if discardPile.type == 'Deck' then
        if discardPile.getName() == '' then
            discardPile.setName(nameDiscardPile(discardPile))
        end
    end
    return discardPile
end

function nameDiscardPile(discardPile)
    local trashID = tool.findTag(discardPile.getTags(),'ID_'):gsub("ID_", "")
    local nameTable = {}
    trashID:gsub("[A-Z][a-z]*", function(word) table.insert(nameTable, word) end) -- Split Cammel Case into a Table
    --print(trashID)
    local spesificTrashName = tool.gameSpecific.DiscardNameFix(trashID)
    if spesificTrashName.found then
        --print('FOUND')
        --print(spesificTrashName.newName)
        return spesificTrashName.newName
    else
        local name = ''
        if #nameTable > 1 then
            name = table.concat(nameTable, " ")
        else
            name = nameTable[1]
        end
        return 'Discarded '..name..'s'
    end
end
--------------------------------------------------------------------------------
--- setIDs ---------------------------------------------------------------------
-- Go through an obj's tag list and find spesific tags related to the trash functions and add them to a data variable for use latter.
function setIDs(tagList)
    --print('setIDs')
    local id = {}
    for k,tag in pairs(tagList) do
        if string.find(tag, 'DiscardObject', 1, true) then
            if string.find(tag, 'SpecialCase', 1, true) then
                id.kind = 'SpecialCase'
            else
                id.kind = 'DiscardObject'
            end
            id.discard = true
        elseif string.find(tag, 'DeleteMe', 1, true) then
            id.delete = true
        elseif string.find(tag, 'ID_', 1, true) then
            id.id = tag
        end
    end
    --debug.zp(id)
    return id
end

--------------------------------------------------------------------------------
--- UniqueCastLocations(TrashBag, removedDeckList) -----------------------------
--- Build a list from trash and find the unique locations for each discard, then cast at that location and return found data.
--- Loop though trash objects and find the "DiscardMe_" Tag.. and then extract the "kind" of discard type as well as the unique Identifyer (ID) of the discard
function UniqueCastLocations(TrashBag, removedDeckList)
    local z = {}
        for k,obj in ipairs(TrashBag.getObjects()) do
            if obj.tags[1] then
                local id = setIDs(obj.tags)
                --debug.zp(id,'OBJ TEST')
                if id.discard then
                    if id.kind ~= KIND.SpecialCase then
                        z[id.id] = id.kind
                    end
                end
            end
        end

        for _, deck in ipairs (removedDeckList) do
            for _, card in ipairs(deck.getObjects()) do
                if card.tags[1] then
                    local id = setIDs(card.tags)
                    --zprint(id,'TEST IN DECK')
                    if id.discard then
                        if id.kind ~= KIND.SpecialCase then
                            z[id.id] = id.kind
                        end
                    end
                end
            end
        end
        --debug.zp(z,'z >>>')
        z = tool.cast.findContainer(z)
    return z
end

--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function removeDecksFormTrash(TrashBag, TrashBag_ContentData)
    local z = {}
        local indexesToRemove = tool.reverseIndexbyTag(TrashBag_ContentData, {tags={'DiscardObject'}, search=false}, {Name='Deck'})
        --debug.zp(indexesToRemove,'indexesToRemove')
        for i,indexToRemove in ipairs (indexesToRemove) do
            local o = TrashBag.takeObject({ index = indexToRemove })
            --o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0,-8)) ------------ debug VERSION OF MOVE
            o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,-70,0))
            o.setRotation(Vector(0,180,0))
            o.setLock(true)
            table.insert(z, o)
        end
    if z[1] then return z else return {} end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
return trashCan
