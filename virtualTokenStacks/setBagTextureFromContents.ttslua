local setBagTextureFromContents = {}

local tool = {}
            tool.hex2Col=require("/_libs/colourUtils/colourUtils").hexToRgb
            tool.tablesize=require("/_libs/tableUtils/tableUtils").tableSize
            tool.commonTag=require("/_libs/tagUtils/tagUtils").returnTagsfoundinTagList
            tool.foundTag=require("/_libs/tagUtils/tagUtils").tagIsFoundOnAllObjectsInBag
            tool.tablesize=require("/_libs/tableUtils/tableUtils").tableSize

            tool.buildVariable=require("/_libs/virtualTokenStacks/phraseVariable").buildVariables

local errorTint = {0.9607843, 0.2235294, 0.2235294} -- '#F53939'

function setBagTextureFromContents.simulateTokenStack(bag, value)

    local value = tool.buildVariable(bag, value)
    if value.type.hex then
        changeBagTexture_hex(bag, value)

    elseif value.type.url then
        changeBagTexture_specificURLs(bag, value)

    elseif value.type.contents then
        changeBagTexture_useTetxureOfTopObjectInBag(bag, value)
    end

end

function changeBagTexture_useTetxureOfTopObjectInBag(bag, value)
    --print("----- USE OBJECT TEXTURE")
    local bagData = bag.getData()
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()
    local matchingTag = false

    if contentCount > 0 then
        local topOBJ = bagData.ContainedObjects[contentCount]
        local newImage = nil

        --This needs to handle the various custom Objects... Mesh, Tile, Token etc etc
        -- I'm adding them as my mods need them.
        --print(topOBJ.Name)
        if topOBJ.Name == "Custom_Tile" then
            if value.upsideDownBag then
                --print("USE BOTTOM IMAGE")
            else
                newImage = topOBJ.CustomImage.ImageURL
                bag.setColorTint('White')
            end

        elseif topOBJ.Name == "Custom_Model" then
            --print(logString(topOBJ.CustomMesh.DiffuseURL))
            newImage = topOBJ.CustomMesh.DiffuseURL
            bag.setColorTint('White')
        end
        bag.setCustomObject({diffuse=newImage})

        --matchThisTag = tool.commonTag(value.tags, bagData.ContainedObjects[contentCount].Tags)
    else
        local matchingTag = tool.commonTag(value.tags, bagData.Tags, true)
        bag.setColorTint(value.empty.hex)
        bag.setCustomObject({diffuse=value.tags[matchingTag]})
    end
    bag.reload()
end

function changeBagTexture_specificURLs(bag, value)
    local bagData = bag.getData()
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()
    local matchingTag = false

    if contentCount > 0 then
        matchThisTag = tool.commonTag(value.tags, bagData.ContainedObjects[contentCount].Tags)
        bag.setCustomObject({diffuse=value.tags[matchThisTag]})
    else
        bag.setCustomObject({diffuse=value.empty.url})
    end
    bag.reload()
end

function changeBagTexture_hex(bag, value)
    local contents = bag.getObjects()
    local bagTags = bag.getTags()

    local matchingTag = false
    if #contents > 0 then
        --print(#contents)
        matchThisTag = tool.commonTag(value.tags, bagTags)

        if tool.foundTag(matchThisTag, contents) then
            bag.setColorTint(value.tags[matchThisTag])
        else
            bag.setColorTint(errorTint)
        end

    else
        bag.setColorTint(value.empty.hex)
    end
end

return setBagTextureFromContents
