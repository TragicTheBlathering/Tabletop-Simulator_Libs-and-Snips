local waitUtils = {}

local wait_ids ={}
local waitIDs = {}

--[[
function waitUtils.dropIntoBox(bag, obj, func, time) -- '0.8'
    local objData = obj.getData()
    time = time or 0.8
    if wait_ids[bag] then Wait.stop(wait_ids[bag]) end
    wait_ids[bag] = Wait.time(function() func(bag, objData) end, time)
end
]]

function waitUtils.dropIntoBox(id, bagObj, objDrop, func, ...) -- '0.8' ... PramTable for Sent Function and number or Fn string for frames or time
    local bagID = bagObj.getGUID()
    local sum = nil
    local useFrames = false
    local args = {...}
    local funcPrams = {}
    local time = 0.8

    for i, arg in ipairs(args) do
        if type(arg) == "table" then
            --print('FOUND : table')
            funcPrams = arg
        elseif type(arg) == "number" then
            --print('FOUND : number')
            time = arg
        elseif type(arg) == "string" then
            --print('FOUND : string')
            time = arg
        end
    end
    funcPrams.bag = bagObj
    funcPrams.objDropData = objDrop.getData()
    --table.insert(funcPrams, {bag=bagObj, objDropData=objDrop.getData()})
    local bag = bagObj

    if type(time) == "string" then -- test if time is a string
        if string.match(time, "%d") ~= nil then -- test if the string has numbers in it
            if sum == nil then sum = 0 end
            for numberStr in time:gmatch("%d+") do -- extract numbers in chat order tonumber() as var "sum"
                sum = sum + tonumber(numberStr)
                useFrames = true
            end
        end
    end
    if sum then time = sum end

    if waitIDs[id] then
        if waitIDs[id][bagID] then
            Wait.stop(waitIDs[id][bagID])
            waitIDs[id][bagID] = {}
        end
    else
        waitIDs[id] = {}
    end

    if useFrames then
        --print('frames')
        waitIDs[id][bagID] = Wait.frames(function() func(funcPrams) end, time)
    else
        --print(time)
        waitIDs[id][bagID] = Wait.time(function() func(funcPrams) end, time)
    end

end

function waitUtils.frames(func, time, ...)--(bag, obj, func, time) -- '0.8'
    time = time or 0.8
    --if wait_ids[bag] then Wait.stop(wait_ids[bag]) end
    --wait_ids[bag] = Wait.time(function() func(bag) end, time)
    local args = {...}
    Wait.frames(function() func(args) end, time)
end

function waitUtils.countClicks(obj,func,delay)
    --print('IN : waitUtils.countClicks')
    local delay = delay or 0.8 -- better way of setting default parameters
    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.
      count = 0, -- We set the count to 0 here when the table is made
    }

    function delayCall()
        func(wait_ids[obj].count)
        wait_ids[obj].waitID = nil -- remove the wait id when the function is called
        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout
    end

    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists
    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count

    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.
end

function waitUtils.runAfterSmoothMove(obj, func)
    Wait.condition(
        func,
        function() -- The function that will be executed repeatedly, until it returns true (or the timeout is reached).
            return not obj.isSmoothMoving()
        end
    )
end

return waitUtils
